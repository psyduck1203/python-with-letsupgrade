{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Find all occurrence of a substring in a given string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text :i am a python programmer and js programmer\n",
      "Enter a word :programmer\n",
      "The word is found at index : 14\n",
      "The word is found at index : 32\n"
     ]
    }
   ],
   "source": [
    "x=input(\"Enter a text :\")\n",
    "y=input(\"Enter a word :\")\n",
    "print(\"The word is found at index :\", x.find(y))\n",
    "print(\"The word is found at index :\", x.rfind(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text :i am a python programmer and js programmer\n",
      "Enter a word :programmer\n",
      "The word is found at index :[14, 32]\n"
     ]
    }
   ],
   "source": [
    "x=input(\"Enter a text :\")\n",
    "y=input(\"Enter a word :\")\n",
    "res = [i for i in range(len(x)) if x.startswith(y, i)] \n",
    "print(\"The word is found at index :\" + str(res))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# islower() and isupper() function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text : abcdef\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter a text : \")\n",
    "print(str1.islower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text : ABcde\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter a text : \")\n",
    "print(str1.islower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text : ABCDEF\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter a text : \")\n",
    "print(str1.isupper())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text : abcdef\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter a text : \")\n",
    "print(str1.isupper())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the text : Hi this a Python Program\n",
      "Lowercase count : 17\n",
      "Uppercase count : 3\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter the text : \")\n",
    "lowercount=0\n",
    "uppercount=0\n",
    "for i in str1:\n",
    "    if (i.islower())==True:\n",
    "        lowercount+=1\n",
    "    if (i.isupper())==True:\n",
    "        uppercount+=1\n",
    "print(\"Lowercase count :\", lowercount)\n",
    "print(\"Uppercase count :\", uppercount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
